/**
 * Real-time Supabase Customer Data Analyzer - Xu√¢n Th√πy Pet Pharmacy
 * K·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi Supabase ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu kh√°ch h√†ng th·ª±c t·∫ø
 */

import { createClient } from '@supabase/supabase-js'
import fs from 'fs/promises'
import path from 'path'
import * as dotenv from 'dotenv'

// Load environment variables
dotenv.config({ path: '.env.local' })

interface Customer {
  customer_id: number
  customer_code: string
  customer_name: string
  customer_type_id: number
  branch_created_id: number
  phone?: string
  email?: string
  address?: string
  company_name?: string
  tax_code?: string
  id_number?: string
  gender?: string
  debt_limit: number
  current_debt: number
  total_revenue: number
  total_profit: number
  purchase_count: number
  last_purchase_date?: string
  status: number
  notes?: string
  created_by: string
  is_active: boolean
  created_at: string
  updated_at: string
}

interface CustomerType {
  type_id: number
  type_code: string
  type_name: string
  description: string
  is_active: boolean
  created_at: string
}

interface Invoice {
  invoice_id: number
  invoice_code: string
  customer_id: number
  total_amount: number
  invoice_date: string
  created_at: string
}

interface SupabaseAnalysisResult {
  summary: {
    totalCustomers: number
    activeCustomers: number
    totalRevenue: number
    avgRevenue: number
    maxRevenue: number
    dataQuality: {
      phoneCompleteness: number
      emailCompleteness: number
      addressCompleteness: number
    }
  }
  demographics: {
    genderDistribution: Record<string, number>
    typeDistribution: Record<string, number>
    branchDistribution: Record<string, number>
  }
  businessMetrics: {
    revenueRanges: Record<string, number>
    debtAnalysis: {
      customersWithDebt: number
      totalDebt: number
      avgDebt: number
      debtViolations: number
    }
    topCustomers: Array<{
      customer_id: number
      name: string
      code: string
      revenue: number
      type: string
    }>
    recentActivity: {
      newCustomersThisMonth: number
      totalInvoicesThisMonth: number
      revenueThisMonth: number
    }
  }
}

class RealSupabaseAnalyzer {
  private supabase: ReturnType<typeof createClient>
  private outputDir = './docs/api'
  private customers: Customer[] = []
  private customerTypes: CustomerType[] = []
  private invoices: Invoice[] = []

  constructor() {
    console.log('üöÄ Kh·ªüi t·∫°o Real-time Supabase Customer Analyzer...')
    console.log(`üìÖ Ng√†y ph√¢n t√≠ch: ${new Date().toLocaleString('vi-VN')}`)
    console.log('=' .repeat(80))

    // Initialize Supabase client
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY

    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå Thi·∫øu th√¥ng tin c·∫•u h√¨nh Supabase!')
      console.error('   Ki·ªÉm tra NEXT_PUBLIC_SUPABASE_URL v√† NEXT_PUBLIC_SUPABASE_ANON_KEY trong .env.local')
      process.exit(1)
    }

    this.supabase = createClient(supabaseUrl, supabaseKey)
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi Supabase client')
    console.log(`üîó URL: ${supabaseUrl}`)
  }

  /**
   * Test k·∫øt n·ªëi Supabase
   */
  async testConnection(): Promise<void> {
    console.log('\nüîå B∆Ø·ªöC 1: Ki·ªÉm tra k·∫øt n·ªëi Supabase...')
    
    try {
      // Test v·ªõi m·ªôt query ƒë∆°n gi·∫£n
      const { error, count } = await this.supabase
        .from('customers')
        .select('customer_id', { count: 'exact', head: true })
        .limit(1)

      if (error) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi Supabase:', error.message)
        console.error('   Chi ti·∫øt:', error)
        
        // G·ª£i √Ω c√°c gi·∫£i ph√°p
        console.log('\nüí° G·ª£i √Ω kh·∫Øc ph·ª•c:')
        console.log('   1. Ki·ªÉm tra URL v√† API key trong .env.local')
        console.log('   2. ƒê·∫£m b·∫£o RLS (Row Level Security) cho ph√©p truy c·∫≠p')
        console.log('   3. Ki·ªÉm tra quy·ªÅn c·ªßa API key ƒë·ªëi v·ªõi b·∫£ng customers')
        console.log('   4. X√°c minh b·∫£ng customers t·ªìn t·∫°i trong database')
        
        throw error
      }

      console.log(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!`)
      console.log(`üìä T·ªïng s·ªë b·∫£n ghi customers: ${count || 'N/A'}`)
      
    } catch (error) {
      console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Supabase:', error)
      throw error
    }
  }

  /**
   * L·∫•y d·ªØ li·ªáu kh√°ch h√†ng t·ª´ Supabase
   */
  async fetchCustomerData(): Promise<void> {
    console.log('\nüìä B∆Ø·ªöC 2: L·∫•y d·ªØ li·ªáu t·ª´ Supabase...')

    try {
      // Fetch customer types
      console.log('üè∑Ô∏è  L·∫•y d·ªØ li·ªáu customer_types...')
      const { data: customerTypesData, error: typesError } = await this.supabase
        .from('customer_types')
        .select('*')
        .order('type_id')

      if (typesError) {
        console.warn('‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y customer_types:', typesError.message)
        this.customerTypes = []
      } else {
        this.customerTypes = (customerTypesData || []) as unknown as CustomerType[]
        console.log(`‚úÖ ƒê√£ l·∫•y ${this.customerTypes.length} lo·∫°i kh√°ch h√†ng:`)
        this.customerTypes.forEach(type => {
          console.log(`   - ${type.type_code}: ${type.type_name}`)
        })
      }

      // Fetch customers
      console.log('\nüë• L·∫•y d·ªØ li·ªáu customers...')
      const { data: customersData, error: customersError } = await this.supabase
        .from('customers')
        .select('*')
        .order('customer_id')

      if (customersError) {
        console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu customers:', customersError.message)
        throw customersError
      }

      this.customers = (customersData || []) as unknown as Customer[]
      console.log(`‚úÖ ƒê√£ l·∫•y ${this.customers.length} kh√°ch h√†ng`)

      if (this.customers.length === 0) {
        console.warn('‚ö†Ô∏è  Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch h√†ng trong database!')
        return
      }

      // Hi·ªÉn th·ªã th·ªëng k√™ c∆° b·∫£n
      const activeCount = this.customers.filter(c => c.is_active).length
      const withRevenueCount = this.customers.filter(c => c.total_revenue > 0).length
      const totalRevenue = this.customers.reduce((sum, c) => sum + (c.total_revenue || 0), 0)

      console.log(`üìà Th·ªëng k√™ c∆° b·∫£n:`)
      console.log(`   - Kh√°ch h√†ng ƒëang ho·∫°t ƒë·ªông: ${activeCount}/${this.customers.length}`)
      console.log(`   - Kh√°ch h√†ng c√≥ doanh thu: ${withRevenueCount}`)
      console.log(`   - T·ªïng doanh thu: ${totalRevenue.toLocaleString('vi-VN')} VND`)

      // Sample m·ªôt v√†i records ƒë·ªÉ debug
      console.log('\nüîç M·∫´u d·ªØ li·ªáu (3 kh√°ch h√†ng ƒë·∫ßu ti√™n):')
      this.customers.slice(0, 3).forEach((customer, index) => {
        console.log(`   ${index + 1}. ${customer.customer_name} (${customer.customer_code})`)
        console.log(`      üìû ${customer.phone || 'N/A'} | üí∞ ${(customer.total_revenue || 0).toLocaleString('vi-VN')} VND`)
      })

      // Fetch recent invoices for activity analysis
      console.log('\nüìã L·∫•y d·ªØ li·ªáu invoices g·∫ßn ƒë√¢y...')
      const oneMonthAgo = new Date()
      oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)
      
      const { data: invoicesData, error: invoicesError } = await this.supabase
        .from('invoices')
        .select('invoice_id, invoice_code, customer_id, total_amount, invoice_date, created_at')
        .gte('created_at', oneMonthAgo.toISOString())
        .order('created_at', { ascending: false })

      if (invoicesError) {
        console.warn('‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu invoices:', invoicesError.message)
        this.invoices = []
      } else {
        this.invoices = (invoicesData || []) as unknown as Invoice[]
        console.log(`‚úÖ ƒê√£ l·∫•y ${this.invoices.length} h√≥a ƒë∆°n trong th√°ng qua`)
      }

    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu:', error)
      throw error
    }
  }

  /**
   * Ph√¢n t√≠ch chi ti·∫øt d·ªØ li·ªáu kh√°ch h√†ng
   */
  async analyzeCustomerData(): Promise<SupabaseAnalysisResult> {
    console.log('\nüìä B∆Ø·ªöC 3: Ph√¢n t√≠ch chi ti·∫øt d·ªØ li·ªáu kh√°ch h√†ng...')

    if (this.customers.length === 0) {
      throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch h√†ng ƒë·ªÉ ph√¢n t√≠ch')
    }

    // 1. Th·ªëng k√™ t·ªïng quan
    console.log('\n1Ô∏è‚É£ Th·ªëng k√™ t·ªïng quan:')
    const totalCustomers = this.customers.length
    const activeCustomers = this.customers.filter(c => c.is_active).length
    const totalRevenue = this.customers.reduce((sum, c) => sum + (c.total_revenue || 0), 0)
    const customersWithRevenue = this.customers.filter(c => (c.total_revenue || 0) > 0)
    const avgRevenue = customersWithRevenue.length > 0 ? totalRevenue / customersWithRevenue.length : 0
    const maxRevenue = Math.max(...this.customers.map(c => c.total_revenue || 0))

    console.log(`   üìã T·ªïng s·ªë kh√°ch h√†ng: ${totalCustomers.toLocaleString('vi-VN')}`)
    console.log(`   ‚úÖ Kh√°ch h√†ng ƒëang ho·∫°t ƒë·ªông: ${activeCustomers.toLocaleString('vi-VN')} (${(activeCustomers/totalCustomers*100).toFixed(1)}%)`)
    console.log(`   üí∞ T·ªïng doanh thu: ${totalRevenue.toLocaleString('vi-VN')} VND`)
    console.log(`   üìà Doanh thu trung b√¨nh: ${Math.round(avgRevenue).toLocaleString('vi-VN')} VND`)
    console.log(`   üèÜ Doanh thu cao nh·∫•t: ${maxRevenue.toLocaleString('vi-VN')} VND`)

    // 2. Ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu
    console.log('\n2Ô∏è‚É£ Ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu:')
    const phoneCompleteness = this.customers.filter(c => c.phone && c.phone.trim()).length / totalCustomers * 100
    const emailCompleteness = this.customers.filter(c => c.email && c.email.trim()).length / totalCustomers * 100
    const addressCompleteness = this.customers.filter(c => c.address && c.address.trim()).length / totalCustomers * 100

    console.log(`   üìû ƒêi·ªán tho·∫°i: ${phoneCompleteness.toFixed(1)}% ${phoneCompleteness > 80 ? 'üü¢' : phoneCompleteness > 50 ? 'üü°' : 'üî¥'}`)
    console.log(`   üìß Email: ${emailCompleteness.toFixed(1)}% ${emailCompleteness > 80 ? 'üü¢' : emailCompleteness > 50 ? 'üü°' : 'üî¥'}`)
    console.log(`   üè† ƒê·ªãa ch·ªâ: ${addressCompleteness.toFixed(1)}% ${addressCompleteness > 80 ? 'üü¢' : addressCompleteness > 50 ? 'üü°' : 'üî¥'}`)

    // 3. Ph√¢n b·ªë nh√¢n kh·∫©u h·ªçc
    console.log('\n3Ô∏è‚É£ Ph√¢n b·ªë nh√¢n kh·∫©u h·ªçc:')

    // Gender distribution
    const genderDistribution = this.customers.reduce((acc, customer) => {
      const gender = customer.gender || 'Kh√¥ng x√°c ƒë·ªãnh'
      acc[gender] = (acc[gender] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    console.log('   üë§ Ph√¢n b·ªë gi·ªõi t√≠nh:')
    Object.entries(genderDistribution)
      .sort((a, b) => b[1] - a[1])
      .forEach(([gender, count]) => {
        const percentage = (count / totalCustomers * 100).toFixed(1)
        console.log(`      ${gender}: ${count.toLocaleString('vi-VN')} (${percentage}%)`)
      })

    // Customer type distribution
    const typeDistribution = this.customers.reduce((acc, customer) => {
      const typeId = customer.customer_type_id
      const typeName = this.customerTypes.find(t => t.type_id === typeId)?.type_name || `Type ${typeId}`
      acc[typeName] = (acc[typeName] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    console.log('   üè∑Ô∏è  Ph√¢n b·ªë lo·∫°i kh√°ch h√†ng:')
    Object.entries(typeDistribution)
      .sort((a, b) => b[1] - a[1])
      .forEach(([type, count]) => {
        const percentage = (count / totalCustomers * 100).toFixed(1)
        console.log(`      ${type}: ${count.toLocaleString('vi-VN')} (${percentage}%)`)
      })

    // Branch distribution
    const branchDistribution = this.customers.reduce((acc, customer) => {
      const branchId = customer.branch_created_id || 'Unknown'
      acc[`Chi nh√°nh ${branchId}`] = (acc[`Chi nh√°nh ${branchId}`] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    console.log('   üè¢ Ph√¢n b·ªë theo chi nh√°nh:')
    Object.entries(branchDistribution)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .forEach(([branch, count]) => {
        const percentage = (count / totalCustomers * 100).toFixed(1)
        console.log(`      ${branch}: ${count.toLocaleString('vi-VN')} (${percentage}%)`)
      })

    // 4. Ph√¢n t√≠ch doanh thu
    console.log('\n4Ô∏è‚É£ Ph√¢n t√≠ch doanh thu:')
    const revenueRanges = {
      'Kh√¥ng c√≥ doanh thu': this.customers.filter(c => (c.total_revenue || 0) === 0).length,
      'D∆∞·ªõi 1 tri·ªáu': this.customers.filter(c => (c.total_revenue || 0) > 0 && (c.total_revenue || 0) < 1000000).length,
      '1-5 tri·ªáu': this.customers.filter(c => (c.total_revenue || 0) >= 1000000 && (c.total_revenue || 0) < 5000000).length,
      '5-20 tri·ªáu': this.customers.filter(c => (c.total_revenue || 0) >= 5000000 && (c.total_revenue || 0) < 20000000).length,
      '20-50 tri·ªáu': this.customers.filter(c => (c.total_revenue || 0) >= 20000000 && (c.total_revenue || 0) < 50000000).length,
      'Tr√™n 50 tri·ªáu': this.customers.filter(c => (c.total_revenue || 0) >= 50000000).length
    }

    Object.entries(revenueRanges).forEach(([range, count]) => {
      const percentage = (count / totalCustomers * 100).toFixed(1)
      console.log(`   üí∞ ${range}: ${count.toLocaleString('vi-VN')} (${percentage}%)`)
    })

    // 5. Ph√¢n t√≠ch c√¥ng n·ª£
    console.log('\n5Ô∏è‚É£ Ph√¢n t√≠ch c√¥ng n·ª£:')
    const customersWithDebt = this.customers.filter(c => (c.current_debt || 0) > 0)
    const totalDebt = this.customers.reduce((sum, c) => sum + (c.current_debt || 0), 0)
    const avgDebt = customersWithDebt.length > 0 ? totalDebt / customersWithDebt.length : 0
    const debtViolations = this.customers.filter(c => (c.current_debt || 0) > (c.debt_limit || 0) && (c.debt_limit || 0) > 0).length

    console.log(`   üìä Kh√°ch h√†ng c√≥ c√¥ng n·ª£: ${customersWithDebt.length.toLocaleString('vi-VN')}`)
    console.log(`   üí∏ T·ªïng c√¥ng n·ª£: ${totalDebt.toLocaleString('vi-VN')} VND`)
    console.log(`   üìà C√¥ng n·ª£ trung b√¨nh: ${Math.round(avgDebt).toLocaleString('vi-VN')} VND`)
    if (debtViolations > 0) {
      console.log(`   ‚ö†Ô∏è  Vi ph·∫°m h·∫°n m·ª©c: ${debtViolations} kh√°ch h√†ng`)
    }

    // 6. Top kh√°ch h√†ng
    console.log('\n6Ô∏è‚É£ Top 10 kh√°ch h√†ng theo doanh thu:')
    const topCustomers = this.customers
      .filter(c => (c.total_revenue || 0) > 0)
      .sort((a, b) => (b.total_revenue || 0) - (a.total_revenue || 0))
      .slice(0, 10)
      .map(c => ({
        customer_id: c.customer_id,
        name: c.customer_name,
        code: c.customer_code,
        revenue: c.total_revenue || 0,
        type: this.customerTypes.find(t => t.type_id === c.customer_type_id)?.type_name || 'Unknown'
      }))

    topCustomers.forEach((customer, index) => {
      console.log(`   ${(index + 1).toString().padStart(2, ' ')}. ${customer.name} (${customer.code})`)
      console.log(`       üí∞ ${customer.revenue.toLocaleString('vi-VN')} VND - ${customer.type}`)
    })

    // 7. Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
    console.log('\n7Ô∏è‚É£ Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y (30 ng√†y):')
    const oneMonthAgo = new Date()
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)
    
    const newCustomersThisMonth = this.customers.filter(c => 
      new Date(c.created_at) >= oneMonthAgo
    ).length

    const revenueThisMonth = this.invoices.reduce((sum, inv) => sum + (inv.total_amount || 0), 0)

    console.log(`   üë§ Kh√°ch h√†ng m·ªõi: ${newCustomersThisMonth.toLocaleString('vi-VN')}`)
    console.log(`   üìã H√≥a ƒë∆°n: ${this.invoices.length.toLocaleString('vi-VN')}`)
    console.log(`   üí∞ Doanh thu: ${revenueThisMonth.toLocaleString('vi-VN')} VND`)

    return {
      summary: {
        totalCustomers,
        activeCustomers,
        totalRevenue: Math.round(totalRevenue),
        avgRevenue: Math.round(avgRevenue),
        maxRevenue,
        dataQuality: {
          phoneCompleteness,
          emailCompleteness,
          addressCompleteness
        }
      },
      demographics: {
        genderDistribution,
        typeDistribution,
        branchDistribution
      },
      businessMetrics: {
        revenueRanges,
        debtAnalysis: {
          customersWithDebt: customersWithDebt.length,
          totalDebt: Math.round(totalDebt),
          avgDebt: Math.round(avgDebt),
          debtViolations
        },
        topCustomers,
        recentActivity: {
          newCustomersThisMonth,
          totalInvoicesThisMonth: this.invoices.length,
          revenueThisMonth: Math.round(revenueThisMonth)
        }
      }
    }
  }

  /**
   * T·∫°o b√°o c√°o chi ti·∫øt
   */
  async generateDetailedReport(analysisResult: SupabaseAnalysisResult): Promise<void> {
    console.log('\nüìù B∆Ø·ªöC 4: T·∫°o b√°o c√°o chi ti·∫øt...')

    try {
      await fs.mkdir(this.outputDir, { recursive: true })

      const report = {
        metadata: {
          title: 'B√°o C√°o Ph√¢n T√≠ch Kh√°ch H√†ng Real-time - Xu√¢n Th√πy Pet Pharmacy',
          generatedAt: new Date().toISOString(),
          generatedBy: 'Real-time Supabase Customer Analyzer v1.0',
          dataSource: 'Supabase Database (Real-time)',
          totalRecordsAnalyzed: this.customers.length,
          analysisScope: 'Full customer database + Recent invoices (30 days)'
        },
        executiveSummary: {
          keyMetrics: {
            totalCustomers: analysisResult.summary.totalCustomers,
            activeCustomersRate: `${(analysisResult.summary.activeCustomers / analysisResult.summary.totalCustomers * 100).toFixed(1)}%`,
            totalRevenue: `${analysisResult.summary.totalRevenue.toLocaleString('vi-VN')} VND`,
            averageRevenuePerCustomer: `${analysisResult.summary.avgRevenue.toLocaleString('vi-VN')} VND`,
            dataQualityScore: `${((analysisResult.summary.dataQuality.phoneCompleteness + analysisResult.summary.dataQuality.emailCompleteness + analysisResult.summary.dataQuality.addressCompleteness) / 3).toFixed(1)}%`
          },
          recentActivity: {
            newCustomersThisMonth: analysisResult.businessMetrics.recentActivity.newCustomersThisMonth,
            invoicesThisMonth: analysisResult.businessMetrics.recentActivity.totalInvoicesThisMonth,
            revenueThisMonth: `${analysisResult.businessMetrics.recentActivity.revenueThisMonth.toLocaleString('vi-VN')} VND`
          }
        },
        detailedAnalysis: analysisResult,
        recommendations: {
          immediate: [
            analysisResult.summary.dataQuality.phoneCompleteness < 70 ? 'C·∫£i thi·ªán thu th·∫≠p s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng' : null,
            analysisResult.summary.dataQuality.emailCompleteness < 50 ? 'TƒÉng c∆∞·ªùng thu th·∫≠p email kh√°ch h√†ng' : null,
            analysisResult.businessMetrics.debtAnalysis.debtViolations > 0 ? `X·ª≠ l√Ω ${analysisResult.businessMetrics.debtAnalysis.debtViolations} kh√°ch h√†ng v∆∞·ª£t h·∫°n m·ª©c c√¥ng n·ª£` : null
          ].filter(Boolean),
          longTerm: [
            'Ph√°t tri·ªÉn ch∆∞∆°ng tr√¨nh kh√°ch h√†ng th√¢n thi·∫øt',
            'T·ª± ƒë·ªông h√≥a quy tr√¨nh chƒÉm s√≥c kh√°ch h√†ng',
            'Ph√¢n kh√∫c kh√°ch h√†ng ƒë·ªÉ marketing hi·ªáu qu·∫£',
            'X√¢y d·ª±ng dashboard theo d√µi real-time'
          ]
        }
      }

      const reportPath = path.join(this.outputDir, 'real-time-customer-analysis-report.json')
      await fs.writeFile(reportPath, JSON.stringify(report, null, 2), 'utf-8')

      // T·∫°o executive summary d·∫°ng markdown
      const markdownSummary = `# B√°o C√°o Ph√¢n T√≠ch Kh√°ch H√†ng Real-time - Xu√¢n Th√πy Pet Pharmacy

## üìä T√≥m T·∫Øt ƒêi·ªÅu H√†nh

**Ng√†y ph√¢n t√≠ch:** ${new Date().toLocaleString('vi-VN')}  
**Ngu·ªìn d·ªØ li·ªáu:** ${this.customers.length.toLocaleString('vi-VN')} kh√°ch h√†ng t·ª´ Supabase (Real-time)

### üéØ Ch·ªâ S·ªë Quan Tr·ªçng

| Ch·ªâ s·ªë | Gi√° tr·ªã |
|--------|---------|
| **T·ªïng s·ªë kh√°ch h√†ng** | ${analysisResult.summary.totalCustomers.toLocaleString('vi-VN')} |
| **Kh√°ch h√†ng ƒëang ho·∫°t ƒë·ªông** | ${analysisResult.summary.activeCustomers.toLocaleString('vi-VN')} (${(analysisResult.summary.activeCustomers/analysisResult.summary.totalCustomers*100).toFixed(1)}%) |
| **T·ªïng doanh thu** | ${analysisResult.summary.totalRevenue.toLocaleString('vi-VN')} VND |
| **Doanh thu trung b√¨nh** | ${analysisResult.summary.avgRevenue.toLocaleString('vi-VN')} VND |

### üìà Ho·∫°t ƒê·ªông G·∫ßn ƒê√¢y (30 ng√†y)

- **Kh√°ch h√†ng m·ªõi:** ${analysisResult.businessMetrics.recentActivity.newCustomersThisMonth.toLocaleString('vi-VN')}
- **H√≥a ƒë∆°n:** ${analysisResult.businessMetrics.recentActivity.totalInvoicesThisMonth.toLocaleString('vi-VN')}
- **Doanh thu:** ${analysisResult.businessMetrics.recentActivity.revenueThisMonth.toLocaleString('vi-VN')} VND

### üèÜ Top 5 Kh√°ch H√†ng VIP

${analysisResult.businessMetrics.topCustomers.slice(0, 5).map((customer, index) => 
  `${index + 1}. **${customer.name}** (${customer.code}) - ${customer.revenue.toLocaleString('vi-VN')} VND`
).join('\n')}

### üìä Ch·∫•t L∆∞·ª£ng D·ªØ Li·ªáu

- **ƒêi·ªán tho·∫°i:** ${analysisResult.summary.dataQuality.phoneCompleteness.toFixed(1)}%
- **Email:** ${analysisResult.summary.dataQuality.emailCompleteness.toFixed(1)}%
- **ƒê·ªãa ch·ªâ:** ${analysisResult.summary.dataQuality.addressCompleteness.toFixed(1)}%

### üö® V·∫•n ƒê·ªÅ C·∫ßn Ch√∫ √ù

${analysisResult.businessMetrics.debtAnalysis.debtViolations > 0 ? 
  `- **C√¥ng n·ª£:** ${analysisResult.businessMetrics.debtAnalysis.debtViolations} kh√°ch h√†ng v∆∞·ª£t h·∫°n m·ª©c` : 
  '‚úÖ Kh√¥ng c√≥ v·∫•n ƒë·ªÅ c√¥ng n·ª£ nghi√™m tr·ªçng'
}

---
*B√°o c√°o ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ d·ªØ li·ªáu Supabase real-time*
`

      const markdownPath = path.join(this.outputDir, 'REAL_TIME_CUSTOMER_ANALYSIS.md')
      await fs.writeFile(markdownPath, markdownSummary, 'utf-8')

      console.log(`‚úÖ ƒê√£ t·∫°o b√°o c√°o chi ti·∫øt: ${reportPath}`)
      console.log(`‚úÖ ƒê√£ t·∫°o t√≥m t·∫Øt ƒëi·ªÅu h√†nh: ${markdownPath}`)

    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o b√°o c√°o:', error)
      throw error
    }
  }

  /**
   * Ch·∫°y to√†n b·ªô ph√¢n t√≠ch
   */
  async runCompleteAnalysis(): Promise<void> {
    console.log('üéØ B·∫ÆT ƒê·∫¶U PH√ÇN T√çCH REAL-TIME KH√ÅCH H√ÄNG XU√ÇN TH√ôY PET PHARMACY')
    console.log('=' .repeat(80))

    try {
      // B∆∞·ªõc 1: Test k·∫øt n·ªëi
      await this.testConnection()

      // B∆∞·ªõc 2: L·∫•y d·ªØ li·ªáu
      await this.fetchCustomerData()

      // B∆∞·ªõc 3: Ph√¢n t√≠ch d·ªØ li·ªáu
      const analysisResult = await this.analyzeCustomerData()

      // B∆∞·ªõc 4: T·∫°o b√°o c√°o
      await this.generateDetailedReport(analysisResult)

      console.log('\n' + '=' .repeat(80))
      console.log('üéâ HO√ÄN TH√ÄNH PH√ÇN T√çCH REAL-TIME!')
      console.log(`üìä ƒê√£ ph√¢n t√≠ch ${this.customers.length.toLocaleString('vi-VN')} kh√°ch h√†ng t·ª´ Supabase`)
      console.log(`üí∞ T·ªïng doanh thu: ${analysisResult.summary.totalRevenue.toLocaleString('vi-VN')} VND`)
      console.log(`üìÅ B√°o c√°o chi ti·∫øt: ./docs/api/`)
      console.log(`üîó D·ªØ li·ªáu ƒë∆∞·ª£c l·∫•y tr·ª±c ti·∫øp t·ª´ Supabase database`)
      console.log('=' .repeat(80))

    } catch (error) {
      console.error('\n‚ùå PH√ÇN T√çCH TH·∫§T B·∫†I:', error)
      if (error instanceof Error && (error.message?.includes('JWT') || error.message?.includes('auth'))) {
        console.log('\nüí° G·ª£i √Ω: Ki·ªÉm tra quy·ªÅn truy c·∫≠p Supabase v√† RLS policies')
      }
      process.exit(1)
    }
  }
}

// Ch·∫°y ph√¢n t√≠ch
async function main() {
  const analyzer = new RealSupabaseAnalyzer()
  await analyzer.runCompleteAnalysis()
}

// Execute
if (require.main === module) {
  main().catch(console.error)
}

export default RealSupabaseAnalyzer
