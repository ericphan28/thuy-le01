/**
 * Supabase Customer Management Database Analyzer & API Tester
 * Ph√¢n t√≠ch schema, test d·ªØ li·ªáu v√† t·∫°o t√†i li·ªáu API cho qu·∫£n l√Ω kh√°ch h√†ng
 */

import { createClient } from '@supabase/supabase-js'
import fs from 'fs/promises'
import { readFileSync } from 'fs'
import path from 'path'

// Remove unused interfaces - they will be imported from types file
// interface Customer, CustomerType, Invoice removed

class SupabaseCustomerAnalyzer {
  private supabase
  private outputDir = './docs/api'

  constructor() {
    // Load environment variables t·ª´ .env.local
    try {
      const envData = readFileSync('.env.local', 'utf8')
      const envVars = envData.split('\n').reduce((acc: Record<string, string>, line: string) => {
        const [key, value] = line.split('=')
        if (key && value) {
          acc[key.trim()] = value.trim()
        }
        return acc
      }, {})
      
      // Set environment variables
      Object.assign(process.env, envVars)
    } catch {
      console.log('‚ö†Ô∏è  .env.local not found, using default values')
    }

    // C·∫•u h√¨nh Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

    // Validate URL format
    if (!supabaseUrl || supabaseUrl === 'your_url' || !supabaseUrl.startsWith('http')) {
      console.error('‚ùå Invalid SUPABASE_URL. Please set proper URL in .env.local')
      console.error('Example: NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co')
      process.exit(1)
    }

    if (!supabaseKey || supabaseKey === 'your_key') {
      console.error('‚ùå Invalid SUPABASE_KEY. Please set proper key in .env.local')
      console.error('Example: NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...')
      process.exit(1)
    }
    
    this.supabase = createClient(supabaseUrl, supabaseKey)
    
    console.log('üîó Supabase Client initialized')
    console.log(`üìç URL: ${supabaseUrl}`)
    console.log(`üîë Key: ${supabaseKey.substring(0, 20)}...`)
  }

  /**
   * Ki·ªÉm tra k·∫øt n·ªëi database
   */
  async testConnection(): Promise<void> {
    try {
      console.log('\nüß™ Testing database connection...')
      
      const { error } = await this.supabase
        .from('customers')
        .select('customer_id')
        .limit(1)

      if (error) {
        throw new Error(`Connection failed: ${error.message}`)
      }

      console.log('‚úÖ Database connection successful')
    } catch (error) {
      console.error('‚ùå Database connection failed:', error)
      throw error
    }
  }

  /**
   * Ph√¢n t√≠ch c·∫•u tr√∫c b·∫£ng customers
   */
  async analyzeCustomerSchema(): Promise<unknown> {
    try {
      console.log('\nüìä Analyzing customers table schema...')

      // L·∫•y sample data ƒë·ªÉ ph√¢n t√≠ch structure
      const { data: customers, error } = await this.supabase
        .from('customers')
        .select('*')
        .limit(5)

      if (error) throw error

      if (!customers || customers.length === 0) {
        console.log('‚ö†Ô∏è  No customers found in database')
        return null
      }

      const sampleCustomer = customers[0]
      const schema = {
        tableName: 'customers',
        totalRecords: customers.length,
        fields: Object.keys(sampleCustomer).map(field => ({
          name: field,
          type: typeof sampleCustomer[field],
          sample: sampleCustomer[field],
          isNullable: sampleCustomer[field] === null
        })),
        sampleData: customers.slice(0, 3)
      }

      console.log(`‚úÖ Schema analyzed: ${schema.fields.length} fields found`)
      return schema
    } catch (error) {
      console.error('‚ùå Schema analysis failed:', error)
      return null
    }
  }

  /**
   * Ph√¢n t√≠ch quan h·ªá customer-invoice
   */
  async analyzeCustomerInvoiceRelation(): Promise<unknown> {
    try {
      console.log('\nüîó Analyzing customer-invoice relationships...')

      const { data, error } = await this.supabase
        .from('customers')
        .select(`
          customer_id,
          customer_name,
          customer_code,
          total_revenue,
          purchase_count,
          invoices (
            invoice_id,
            invoice_code,
            total_amount,
            payment_status,
            invoice_date
          )
        `)
        .limit(3)

      if (error) throw error

      console.log(`‚úÖ Relationship analysis complete: ${data?.length} customers with invoices`)
      return data
    } catch (error) {
      console.error('‚ùå Relationship analysis failed:', error)
      return null
    }
  }

  /**
   * Test c√°c function c√≥ s·∫µn trong database
   */
  async testDatabaseFunctions(): Promise<void> {
    console.log('\nüßÆ Testing database functions...')

    try {
      // Test get_financial_summary function
      console.log('üìà Testing get_financial_summary...')
      const { data: financialData, error: financialError } = await this.supabase
        .rpc('get_financial_summary', {
          date_from: '2025-07-01',
          date_to: '2025-07-31'
        })

      if (financialError) {
        console.log('‚ö†Ô∏è  get_financial_summary not available or error:', financialError.message)
      } else {
        console.log('‚úÖ get_financial_summary working:', JSON.stringify(financialData, null, 2))
      }

      // Test search_customers_with_stats function (n·∫øu c√≥)
      console.log('üîç Testing search_customers_with_stats...')
      const { data: searchData, error: searchError } = await this.supabase
        .rpc('search_customers_with_stats', {
          search_term: '',
          customer_type_filter: null,
          limit_count: 5
        })

      if (searchError) {
        console.log('‚ö†Ô∏è  search_customers_with_stats not available:', searchError.message)
      } else {
        console.log('‚úÖ search_customers_with_stats working:', searchData?.length, 'records')
      }

    } catch (error) {
      console.error('‚ùå Function testing failed:', error)
    }
  }

  /**
   * Test CRUD operations
   */
  async testCRUDOperations(): Promise<void> {
    console.log('\nüîß Testing CRUD operations...')

    const testCustomerCode = `TEST_${Date.now()}`
    let testCustomerId: number | null = null

    try {
      // CREATE - T·∫°o customer test
      console.log('‚ûï Testing CREATE operation...')
      const { data: createData, error: createError } = await this.supabase
        .from('customers')
        .insert([{
          customer_code: testCustomerCode,
          customer_name: 'Test Customer for API',
          phone: '0999999999',
          email: 'test@xuanthuy.com',
          customer_type_id: 1,
          debt_limit: 5000000,
          current_debt: 0,
          total_revenue: 0,
          total_profit: 0,
          purchase_count: 0,
          status: 1,
          is_active: true
        }])
        .select()
        .single()

      if (createError) {
        console.log('‚ùå CREATE failed:', createError.message)
        return
      }

      testCustomerId = createData.customer_id
      console.log('‚úÖ CREATE successful, ID:', testCustomerId)

      // READ - ƒê·ªçc customer v·ª´a t·∫°o
      console.log('üìñ Testing READ operation...')
      const { data: readData, error: readError } = await this.supabase
        .from('customers')
        .select('*')
        .eq('customer_id', testCustomerId)
        .single()

      if (readError) {
        console.log('‚ùå READ failed:', readError.message)
      } else {
        console.log('‚úÖ READ successful:', readData.customer_name)
      }

      // UPDATE - C·∫≠p nh·∫≠t customer
      console.log('‚úèÔ∏è  Testing UPDATE operation...')
      const { data: updateData, error: updateError } = await this.supabase
        .from('customers')
        .update({ 
          customer_name: 'Updated Test Customer',
          total_revenue: 1000000,
          updated_at: new Date().toISOString()
        })
        .eq('customer_id', testCustomerId)
        .select()
        .single()

      if (updateError) {
        console.log('‚ùå UPDATE failed:', updateError.message)
      } else {
        console.log('‚úÖ UPDATE successful:', updateData.customer_name)
      }

      // DELETE - X√≥a customer test
      console.log('üóëÔ∏è  Testing DELETE operation...')
      const { error: deleteError } = await this.supabase
        .from('customers')
        .delete()
        .eq('customer_id', testCustomerId)

      if (deleteError) {
        console.log('‚ùå DELETE failed:', deleteError.message)
      } else {
        console.log('‚úÖ DELETE successful')
        testCustomerId = null
      }

    } catch (error) {
      console.error('‚ùå CRUD testing failed:', error)
    } finally {
      // Cleanup n·∫øu c√≥ l·ªói v√† customer ch∆∞a ƒë∆∞·ª£c x√≥a
      if (testCustomerId) {
        try {
          await this.supabase
            .from('customers')
            .delete()
            .eq('customer_id', testCustomerId)
          console.log('üßπ Cleanup completed')
        } catch (cleanupError) {
          console.error('‚ö†Ô∏è  Cleanup failed:', cleanupError)
        }
      }
    }
  }

  /**
   * Test t√¨m ki·∫øm v√† l·ªçc d·ªØ li·ªáu
   */
  async testSearchAndFilter(): Promise<void> {
    console.log('\nüîç Testing search and filter operations...')

    try {
      // Test basic search
      console.log('üî§ Testing text search...')
      const { data: searchData, error: searchError } = await this.supabase
        .from('customers')
        .select('customer_id, customer_name, customer_code, phone')
        .or('customer_name.ilike.%test%,customer_code.ilike.%KH%,phone.ilike.%09%')
        .limit(5)

      if (searchError) {
        console.log('‚ùå Search failed:', searchError.message)
      } else {
        console.log(`‚úÖ Search successful: ${searchData?.length} results`)
      }

      // Test filtering by customer type
      console.log('üè∑Ô∏è  Testing filter by customer type...')
      const { data: filterData, error: filterError } = await this.supabase
        .from('customers')
        .select(`
          customer_id,
          customer_name,
          customer_types (
            type_name
          )
        `)
        .eq('customer_type_id', 1)
        .limit(3)

      if (filterError) {
        console.log('‚ùå Filter failed:', filterError.message)
      } else {
        console.log(`‚úÖ Filter successful: ${filterData?.length} results`)
      }

      // Test pagination
      console.log('üìÑ Testing pagination...')
      const { data: pageData, error: pageError, count } = await this.supabase
        .from('customers')
        .select('customer_id, customer_name', { count: 'exact' })
        .range(0, 9) // First 10 records
        .order('customer_name')

      if (pageError) {
        console.log('‚ùå Pagination failed:', pageError.message)
      } else {
        console.log(`‚úÖ Pagination successful: ${pageData?.length} of ${count} total records`)
      }

    } catch (error) {
      console.error('‚ùå Search and filter testing failed:', error)
    }
  }

  /**
   * T·∫°o t√†i li·ªáu API
   */
  async generateAPIDocumentation(): Promise<void> {
    console.log('\nüìö Generating API documentation...')

    try {
      // T·∫°o th∆∞ m·ª•c docs n·∫øu ch∆∞a c√≥
      await fs.mkdir(this.outputDir, { recursive: true })

      const apiDoc = {
        title: "Xu√¢n Th√πy - Customer Management API Documentation",
        version: "1.0.0",
        description: "API Documentation for Customer Management System",
        baseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,
        generatedAt: new Date().toISOString(),
        
        authentication: {
          type: "Bearer Token",
          description: "Use Supabase anon key or service role key"
        },

        endpoints: {
          customers: {
            basePath: "/rest/v1/customers",
            operations: {
              "GET /customers": {
                description: "L·∫•y danh s√°ch kh√°ch h√†ng v·ªõi pagination v√† filter",
                parameters: {
                  select: "Ch·ªçn c√°c tr∆∞·ªùng c·∫ßn l·∫•y (m·∫∑c ƒë·ªãnh: *)",
                  limit: "S·ªë l∆∞·ª£ng record (m·∫∑c ƒë·ªãnh: 1000)",
                  offset: "B·ªè qua s·ªë record ƒë·∫ßu",
                  order: "S·∫Øp x·∫øp theo tr∆∞·ªùng (VD: customer_name.asc)",
                  customer_type_id: "L·ªçc theo lo·∫°i kh√°ch h√†ng",
                  is_active: "L·ªçc theo tr·∫°ng th√°i (true/false)"
                },
                example: `GET /rest/v1/customers?select=*&limit=20&offset=0&order=customer_name.asc&is_active=eq.true`
              },

              "GET /customers/:id": {
                description: "L·∫•y th√¥ng tin chi ti·∫øt 1 kh√°ch h√†ng",
                example: "GET /rest/v1/customers?customer_id=eq.1&select=*"
              },

              "POST /customers": {
                description: "T·∫°o kh√°ch h√†ng m·ªõi",
                requiredFields: ["customer_code", "customer_name"],
                optionalFields: ["phone", "email", "address", "customer_type_id"],
                example: {
                  customer_code: "KH000001",
                  customer_name: "Nguy·ªÖn VƒÉn A",
                  phone: "0987654321",
                  email: "nguyenvana@email.com",
                  customer_type_id: 1
                }
              },

              "PATCH /customers": {
                description: "C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng",
                example: {
                  customer_name: "Nguy·ªÖn VƒÉn B Updated",
                  phone: "0987654322"
                }
              },

              "DELETE /customers": {
                description: "X√≥a kh√°ch h√†ng (soft delete b·∫±ng c√°ch set is_active=false)",
                note: "Khuy·∫øn ngh·ªã s·ª≠ d·ª•ng PATCH ƒë·ªÉ set is_active=false thay v√¨ DELETE"
              }
            }
          },

          customer_types: {
            basePath: "/rest/v1/customer_types",
            operations: {
              "GET /customer_types": {
                description: "L·∫•y danh s√°ch lo·∫°i kh√°ch h√†ng",
                example: "GET /rest/v1/customer_types?select=*&is_active=eq.true"
              }
            }
          },

          rpc_functions: {
            basePath: "/rest/v1/rpc",
            operations: {
              "search_customers_with_stats": {
                description: "T√¨m ki·∫øm kh√°ch h√†ng k√®m th·ªëng k√™",
                parameters: {
                  search_term: "T·ª´ kh√≥a t√¨m ki·∫øm",
                  customer_type_filter: "L·ªçc theo lo·∫°i kh√°ch h√†ng",
                  limit_count: "S·ªë l∆∞·ª£ng k·∫øt qu·∫£",
                  date_from: "Ng√†y b·∫Øt ƒë·∫ßu th·ªëng k√™"
                },
                example: `POST /rest/v1/rpc/search_customers_with_stats
{
  "search_term": "nguyen",
  "customer_type_filter": null,
  "limit_count": 20,
  "date_from": "2025-07-01"
}`
              },

              "get_financial_summary": {
                description: "B√°o c√°o t√†i ch√≠nh t·ªïng quan",
                parameters: {
                  date_from: "Ng√†y b·∫Øt ƒë·∫ßu",
                  date_to: "Ng√†y k·∫øt th√∫c"
                },
                example: `POST /rest/v1/rpc/get_financial_summary
{
  "date_from": "2025-07-01",
  "date_to": "2025-07-31"
}`
              }
            }
          }
        },

        responseFormats: {
          success: {
            description: "Ph·∫£n h·ªìi th√†nh c√¥ng",
            example: {
              data: "[]",
              status: 200,
              statusText: "OK"
            }
          },
          error: {
            description: "Ph·∫£n h·ªìi l·ªói",
            example: {
              code: "PGRST116",
              details: "The result contains 0 rows",
              hint: null,
              message: "JSON object requested, multiple (or no) rows returned"
            }
          }
        },

        commonHeaders: {
          "Content-Type": "application/json",
          "Authorization": "Bearer YOUR_SUPABASE_KEY",
          "apikey": "YOUR_SUPABASE_ANON_KEY"
        },

        bestPractices: [
          "Lu√¥n s·ª≠ d·ª•ng `select` ƒë·ªÉ ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt",
          "S·ª≠ d·ª•ng pagination v·ªõi `limit` v√† `offset` cho hi·ªáu su·∫•t t·ªët",
          "S·ª≠ d·ª•ng `eq`, `ilike`, `gte`, `lte` cho filtering ch√≠nh x√°c",
          "Ki·ªÉm tra l·ªói trong response tr∆∞·ªõc khi x·ª≠ l√Ω data",
          "S·ª≠ d·ª•ng RPC functions cho logic ph·ª©c t·∫°p",
          "Implement retry logic cho network errors",
          "Cache d·ªØ li·ªáu √≠t thay ƒë·ªïi nh∆∞ customer_types"
        ]
      }

      // Ghi file documentation
      const docPath = path.join(this.outputDir, 'customer-management-api.json')
      await fs.writeFile(docPath, JSON.stringify(apiDoc, null, 2), 'utf-8')

      console.log(`‚úÖ API documentation generated: ${docPath}`)

      // T·∫°o README cho developer
      const readmeContent = `# Customer Management API

## Quick Start

\`\`\`typescript
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  'YOUR_SUPABASE_URL',
  'YOUR_SUPABASE_ANON_KEY'
)

// L·∫•y danh s√°ch kh√°ch h√†ng
const { data: customers, error } = await supabase
  .from('customers')
  .select('*')
  .eq('is_active', true)
  .limit(20)
\`\`\`

## Common Operations

### 1. T√¨m ki·∫øm kh√°ch h√†ng
\`\`\`typescript
const { data } = await supabase
  .from('customers')
  .select('customer_id, customer_name, phone')
  .or('customer_name.ilike.%search%,phone.ilike.%search%')
\`\`\`

### 2. T·∫°o kh√°ch h√†ng m·ªõi
\`\`\`typescript
const { data, error } = await supabase
  .from('customers')
  .insert([{
    customer_code: 'KH000001',
    customer_name: 'Nguy·ªÖn VƒÉn A',
    phone: '0987654321'
  }])
  .select()
\`\`\`

### 3. S·ª≠ d·ª•ng RPC function
\`\`\`typescript
const { data } = await supabase
  .rpc('search_customers_with_stats', {
    search_term: 'nguyen',
    limit_count: 20
  })
\`\`\`

Xem file \`customer-management-api.json\` ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.
`

      const readmePath = path.join(this.outputDir, 'README.md')
      await fs.writeFile(readmePath, readmeContent, 'utf-8')

      console.log(`‚úÖ README generated: ${readmePath}`)

    } catch (error) {
      console.error('‚ùå Documentation generation failed:', error)
    }
  }

  /**
   * Ch·∫°y t·∫•t c·∫£ test v√† ph√¢n t√≠ch
   */
  async runFullAnalysis(): Promise<void> {
    console.log('üöÄ Starting Supabase Customer Management Analysis...')
    console.log('=' .repeat(60))

    try {
      // 1. Test connection
      await this.testConnection()

      // 2. Ph√¢n t√≠ch schema
      await this.analyzeCustomerSchema()
      
      // 3. Ph√¢n t√≠ch relationships
      await this.analyzeCustomerInvoiceRelation()

      // 4. Test database functions
      await this.testDatabaseFunctions()

      // 5. Test CRUD operations
      await this.testCRUDOperations()

      // 6. Test search and filter
      await this.testSearchAndFilter()

      // 7. Generate API docs
      await this.generateAPIDocumentation()

      console.log('\n' + '=' .repeat(60))
      console.log('üéâ Analysis completed successfully!')
      console.log('üìÅ Check ./docs/api/ folder for generated documentation')

    } catch (error) {
      console.error('\n‚ùå Analysis failed:', error)
      process.exit(1)
    }
  }
}

// Run the analyzer
async function main() {
  const analyzer = new SupabaseCustomerAnalyzer()
  await analyzer.runFullAnalysis()
}

// Execute if run directly
if (require.main === module) {
  main().catch(console.error)
}

export default SupabaseCustomerAnalyzer
